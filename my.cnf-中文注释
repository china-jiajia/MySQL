[client]
port            = 3306
socket          = /tmp/mysql3306.sock

[mysql]
prompt="\u@\h [\d]>"
no-auto-rehash

[mysqld]
user = mysql
basedir = /usr/local/mysql
datadir = /data/mysql/mysql3306/data
socket = /tmp/mysql3306.sock
tmpdir = /data/mysql/mysql3306/tmp
port = 3306
server-id = 203306
#skip-name-resolve
event_scheduler = 0 			#计划任务
character-set-server = utf8
secure_file_priv="/tmp" 		#执行outfile时 存放的目录

#------------MySQL Log----------------#
log-output=file 				#指定日志的存储方式
log-error = /data/mysql/mysql3306/logs/error.log
log_warnings = 2 				#定义日志类型(M有SQL有6中日志类型)

#------------session variables-------#
thread_stack = 192K 			#每个连接线程被创建时，MySQL给它分配的内存大小
sort_buffer_size = 128K			#单个连接session分配的内存
max_length_for_sort_data = 2048 #排序优化		
join_buffer_size = 128K			#链表buffer
thread_cache_size = 200			#线程缓存

#-------------------gobal variables------------#
interactive_timeout = 300 		#关闭交互式连接前等待活动的时间
wait_timeout = 300				#关闭非交互式连接等待活动的时间
open_files_limit = 65535
max_connections = 100
max_connect_errors = 100000
lower_case_table_names =1 		#大小写敏感
pid-file = mysql.pid
table_open_cache = 2048 		#指定表高速缓存的大小
table_definition_cache = 2048	#定义可以缓存表的数量
table_open_cache = 2048
max_heap_table_size = 96M		#定义创建的内存表(memory table)的大小
tmp_table_size = 96M			#内存临时表的大小
query_cache_size = 0			#查询缓存
query_cache_type = 0			#sql查询缓存状态(0 1 2)
query_cache_limit = 256K		#单个查询能够使用的缓冲区大小
query_cache_min_res_unit = 512	#分配缓冲区空间的最小单位
key_buffer_size = 8M 			#设置索引块（index blocks）缓存的大小
read_buffer_size = 2M 			#MySQL顺序读入缓冲区的大小
read_rnd_buffer_size = 16M		#MySQL随机读缓冲区大小
bulk_insert_buffer_size = 32M 	#批量插入数据缓存大小，可以有效提高插入效率，默认为8M


#------------Slow Log----------------#
slow_query_log = 1
slow_query_log_file = slow.log
long_query_time = 1
log-slow-slave-statements = 1 	#记录由Slave所产生的慢查询
log_queries_not_using_indexes = 1 		#没有走索引的SQL记录下来

#------------BinLog----------------#
binlog_format = row
log-bin = /data/mysql/mysql3306/logs/mysql-bin
max_binlog_size = 256M
sync_binlog = 0
expire_logs_days = 10
log_bin_trust_function_creators = 1   #开启了log-bin的MySQL Server便可以随意创建function

#------------GTID----------------#
gtid-mode = on
enforce-gtid-consistency=1			
skip_slave_start = 1			#复制进程就不会随着数据库的启动而启动

#---------------relay log--------------#
max_relay_log_size = 128M		#relay log 允许的最大值
relay_log_purge = 1 			#清楚relay log(SQL线程操作完之后一次性删除)
relay_log_recovery = 1			#relay log 恢复
relay-log=relay-bin
relay-log-index=relay-bin.index
log_slave_updates = 1 			#同步数据的所有操作写入binlog

#----------------MyISAM----------------#
myisam_sort_buffer_size = 128M 		#MyISAM表发生变化时重新排序所需的缓冲

# MySQL重建索引时所允许的最大临时文件的大小 (当 REPAIR, ALTER TABLE 或者 LOAD DATA INFILE).
# 如果文件大小比此值更大,索引会通过键值缓冲创建(更慢)
myisam_max_sort_file_size = 10G

# 如果一个表拥有超过一个索引, MyISAM 可以通过并行排序使用超过一个线程去修复他们.
# 这对于拥有多个CPU以及大量内存情况的用户,是一个很好的选择.
myisam_repair_threads = 1

#----------------InnoDB----------------#
innodb_buffer_pool_size = 100M
innodb_buffer_pool_instances = 1 		#开启内存缓冲池的个数
innodb_data_file_path = ibdata1:100M:autoextend
innodb_flush_log_at_trx_commit = 2 		#将事务日志从innodb log buffer写入到redo log中

说明：日志缓冲区大小,一般不用设置太大，能存下1秒钟操作的数据日志就行了，mysql默认1秒写一轮询写一次日志到磁盘。
innodb_log_buffer_size = 8M

#此参数确定数据日志文件的大小，以M为单位，更大的设置可以提高性能，但也会增加恢复故障数据库所需的时间
innodb_log_file_size = 100M

#为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3M
innodb_log_files_in_group = 3

#Buffer_Pool中Dirty_Page所占的数量，直接影响InnoDB的关闭时间。参数innodb_max_dirty_pages_pct可以直接控制了Dirty_Page在Buffer_Pool中所占的比率，而且幸运的是innodb_max_dirty_pages_pct是可以动态改变的。所以，在关闭InnoDB之前先将innodb_max_dirty_pages_pct调小，强制数据块Flush一段时间，则能够大大缩短MySQL关闭的时间。
innodb_max_dirty_pages_pct = 50

innodb_file_per_table = 1 	#独享表空间（关闭）
innodb_rollback_on_timeout 	#失误等待锁超时回滚参数
innodb_io_capacity = 2000 	#脏页刷盘控制
transaction_isolation = READ-COMMITTED 

#控制着innodb数据文件及redo log的打开、刷写模式，对于这个参数，文档上是这样描述的：有三个值：fdatasync(默认)，O_DSYNC，O_DIRECT 
innodb_flush_method = O_DIRECT


#---------------------audit LOG---------------------#
#server_audit_events='CONNECT,QUERY,TABLE,QUERY_DDL,QUERY_DML,QUERY_DCL'
#server_audit_logging=on
#server_audit_file_path =/data/mysql/mysql3306/logs/
#server_audit_file_rotate_size=200000000
#server_audit_file_rotations=200
#server_audit_file_rotate_now=ON


#------------------PXC-----------------------------#
#default_storage_engine=Innodb

定义Galera复制插件的路径
#wsrep_provider = /usr/local/mysql/lib/libgalera_smm.so   

定义节点在连接到集群时使用的后端架构，IP地址，端口和选项
#wsrep_cluster_address = gcomm://172.26.0.17,172.26.0.20,172.26.0.4   

定义节点为自己使用的逻辑名称
#wsrep_node_name = servcie04

定义节点的IP地址和端口
#wsrep_node_address = 172.26.0.20

定义节点的逻辑集群名称
#wsrep_cluster_name = pxc_sampson    

定义在状态快照传输中使用的身份验证信息
#wsrep_sst_auth = sst:123456    

定义节点在状态快照传输中使用的方法或脚本
#wsrep_sst_method = xtrabackup-v2    

定义在应用从属写入集时使用的线程数
#wsrep_slave_threads = 2    

控制PXC严格模式，该模式运行验证，以避免在Percona XtraDB集群中使用实验性和不受支持的功能
#pxc_strict_mode = ENFORCING     

用于生成自动递增值的锁定模式必须交错， 以确保每个节点生成唯一的（但是不连续的）标识符
#innodb_autoinc_lock_mode = 2     

定义节点传递给wsrep Provider的可选设置
#wsrep_provider_options = "debug=1;gcache.size=1G" 


#-------------------group_replication--------------#
group_replication插件开启配置
#plugin-load=group_replication

记录事务的算法
#transaction_write_set_extraction = XXHASH64

此GROUP的名字,必须是一个有效的UUID,以此来区分整个网里边的各个不同的GROUP
#loose-group_replication_group_name = '9ac06b4e-13aa-11e7-a62e-5254004347f9'

IP地址白名单设置
#loose-group_replication_ip_whitelist = '127.0.0.1/8,172.26.0.0/20'

是否随服务器启动而自动启动组复制
#loose-group_replication_start_on_boot = OFF


本地的IP地址字符串,host:port
#loose-group_replication_local_address = '172.26.0.20:24201'

需要接受本实例的信息服务器IP地址字符串
#loose-group_replication_group_seeds = '172.26.0.17:24201,172.26.0.20:24202,172.26.0.4:24401'

引导组成员的组，这个用于第一次搭建MGR跟重新搭建MGR的时候使用
#loose-group_replication_bootstrap_group = OFF

是否启动单主模式，如果启动，则本实例是主库，提供读写，其他实例仅提供读
#loose-group_replication_single_primary_mode = {OFF|TRUE}

多主模式下强制检查每一个实例是否允许该操作
#loose-group_replication_enforce_update_everywhere_checks = false
