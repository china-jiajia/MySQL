
innodb_buffer_pool_size = 12G
innodb_max_dirty_pages_pct = 50				#脏页刷新(默认值为75，也就是说当脏页比例超过75%时才会进入勤快刷新模式)

#innodb_data_home_dir =
innodb_data_file_path = ibdata1:2G:autoextend  	#设定共享表空间
innodb_log_buffer_size = 64M 				#redo-log(重做日志) buffer	
innodb_log_file_size = 500M					#设置redo-log的大小
innodb_log_files_in_group = 2	 			#设置redo-log创建多少个
innodb_file_per_table = 1					#设置创建独立表空间
innodb_status_file = 1 						#启用InnoDB的status file，便于管理员查看以及监控等 

innodb_autoinc_lock_mode = 1 				#设置auto_increment(自增长)列的表插入数据时，相关锁的行为(0:这个表示tradition 传统、1:这个表示consecutive 连续、2:这个表示interleaved 交错)
innodb_thread_concurrency = 0				#设置调节并发线程数的限制值(innodb_thread_concurrency、innodb_thread_sleep_delay、innodb_concurrency_tickets、innodb_commit_concurrency这四个参数结合使用)
innodb_read_io_threads = 8 					#设置read thread(读线程个数，默认是4个)
innodb_write_io_threads = 8					#设置write thread(写线程个数，默认是4个)

innodb_flush_method = O_DIRECT 				#设置innodb数据文件及redo log的打开、刷写模式(fdatasync(默认)：调用fsync()去刷数据文件与redo log的buffer、O_DSYNC时：innodb会使用O_SYNC方式打开和刷写redo log,使用fsync()刷写数据文件、O_DIRECT时：innodb使用O_DIRECT打开数据文件，使用fsync()刷写数据文件跟redo log)

#单位是页，该参数的设置大小取决于硬盘的IOPS，即每秒每秒的输入输出量(或读写次数)。
innodb_io_capacity = 10000  				#设置刷新脏页的数量
innodb_io_capacity_max = 20000				#设置刷新脏页的最大数量

transaction_isolation = READ-COMMITTED		#设置数据库的隔离级别

innodb_rollback_on_timeout = 1				#对锁的超时回滚(0 表示rollback最后一条语句，默认值;(有点坑)、1 表示回滚事务B内所有的statements;)

	1、关闭innodb_rollback_on_timeout后，一旦以begin;start transaction;等语句开启一个事务，当锁等待超时后，该事务请求的锁将不释放，直到事务提交或回滚或会话超时；所以autocommit参数建议设置成ON，只要程序没有显示开启事务，就可以避免上述锁未释放问题。
	2、开启innodb_rollback_on_timeout后，一旦锁等待超时，是事务内sql将全部回滚，且释放之前请求的锁。
	3、当autocommit=on，只要不显示开启事务，将不存在上面2个问题，即锁的问题和回滚的问题



innodb_flush_log_at_trx_commit = 1
sync_binlog = 1

#innodb_flush_log_at_trx_commit和sync_binlog 两个参数是控制MySQL 磁盘写入策略以及数据安全性的关键参数
	1、innodb_flush_log_at_trx_commit
		innodb_flush_log_at_trx_commit:是InnoDB引擎特有的，ib_logfile的刷新方式（ ib_logfile：记录的是redo log和undo log的信息）

		取值:0/1/2
		innodb_flush_log_at_trx_commit=0，表示每隔一秒把log buffer刷到文件系统中(os buffer)去，并且调用文件系统的“flush”操作将缓存刷新到磁盘上去。也就是说一秒之前的日志都保存在日志缓冲区，也就是内存上，如果机器宕掉，可能丢失1秒的事务数据。

		innodb_flush_log_at_trx_commit=1，表示在每次事务提交的时候，都把log buffer刷到文件系统中(os buffer)去，并且调用文件系统的“flush”操作将缓存刷新到磁盘上去。这样的话，数据库对IO的要求就非常高了，如果底层的硬件提供的IOPS比较差，那么MySQL数据库的并发很快就会由于硬件IO的问题而无法提升。

		innodb_flush_log_at_trx_commit=2，表示在每次事务提交的时候会把log buffer刷到文件系统中去，但并不会立即刷写到磁盘。如果只是MySQL数据库挂掉了，由于文件系统没有问题，那么对应的事务数据并没有丢失。只有在数据库所在的主机操作系统损坏或者突然掉电的情况下，数据库的事务数据可能丢失1秒之类的事务数据。这样的好处，减少了事务数据丢失的概率，而对底层硬件的IO要求也没有那么高(log buffer写到文件系统中，一般只是从log buffer的内存转移的文件系统的内存缓存中，对底层IO没有压力)

	2、sync_binlog
		sync_binlog：是MySQL 的二进制日志（binary log）同步到磁盘的频率。

		取值：0-N
		sync_binlog=0，当事务提交之后，MySQL不做fsync之类的磁盘同步指令刷新binlog_cache中的信息到磁盘，而让Filesystem自行决定什么时候来做同步，或者cache满了之后才同步到磁盘。这个是性能最好的。
		sync_binlog=1，当每进行1次事务提交之后，MySQL将进行一次fsync之类的磁盘同步指令来将binlog_cache中的数据强制写入磁盘。
		sync_binlog=n，当每进行n次事务提交之后，MySQL将进行一次fsync之类的磁盘同步指令来将binlog_cache中的数据强制写入磁盘。

		注：
		大多数情况下，对数据的一致性并没有很严格的要求，所以并不会把 sync_binlog 配置成 1. 为了追求高并发，提升性能，可以设置为 100 或直接用 0.


	3、安全
	1.当innodb_flush_log_at_trx_commit和sync_binlog  都为 1 时是最安全的，在mysqld 服务崩溃或者服务器主机crash的情况下，binary log 只有可能丢失最多一个语句或者一个事务。但是鱼与熊掌不可兼得，双11 会导致频繁的io操作，因此该模式也是最慢的一种方式。
	2.当innodb_flush_log_at_trx_commit设置为0，mysqld进程的崩溃会导致上一秒钟所有事务数据的丢失。
	3.当innodb_flush_log_at_trx_commit设置为2，只有在操作系统崩溃或者系统掉电的情况下，上一秒钟所有事务数据才可能丢失。

	注：
		双1适合数据安全性要求非常高，而且磁盘IO写能力足够支持业务，比如订单,交易,充值,支付消费系统。双1模式下，当磁盘IO无法满足业务需求时 比如11.11 活动的压力。推荐的做法是 innodb_flush_log_at_trx_commit=2 ，sync_binlog=N (N为500 或1000) 且使用带蓄电池后备电源的缓存cache，防止系统断电异常。
