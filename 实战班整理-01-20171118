
实战班整理:
	
	MySQL-环境标准化：
		.关闭CPU掉电保护
		.内存回收机制(vm.zone_reclaim_mode=0/vim.swappiness=0 #避免使用swap)
		.关闭numa(内存调度算法)
		.磁盘调度算法
			.SSD	
				.echo noop /sys/block/sda/queue/scheuler
				.vim /etc/grub.conf 在kernel行后添加 elevator=noop
			.SAS
				.echo dealine /sys/block/sda/queue/scheduler
				.vim /etc/grub.conf 在kernel行后面添加 elevator-dealine
		.文件系统
			.EXT3、EXT4和reiserfs文件系统(挂载是指定:barrier=0)
				.mount /dev/sda2 -o barrier=0 /data
				.vim /etc/fstab   #/dev/sda2 /data ext4 default,noatime,barrier=0  0 0
			.XFS文件系统挂载时指定(nobarrier=0)
				.mount /dev/sda2 -o barrier=0 /data 
				.vim /etc/fstab   #/dev/sda2 /data xfs default.noatime,nobarrier=0  0 0

		.系统文件句柄数配置
			.vim /etc/secruity/limit.conf
			  	 * soft nofile 65535
			     * hard nofile 65535
			     * soft noproc 65535
			     * hard noproc 65535

			.vim /etc/security/limits.d/20-nproc.conf
				*          soft    nproc     65535
				*          hard    nproc     65535
				root       soft nproc   65535
				root       hard    nproc   65535

		.系统网络优化
			vim /etc/sysctl.conf
				 net.ipv4.tcp_max_syn_backlog = 819200
			     net.core.netdev_max_backlog = 400000     
			     net.core.somaxconn = 4096
			     net.ipv4.tcp_tw_reuse=1
			     net.ipv4.tcp_tw_recycle=0

			     vm.dirty_ratio=5
				 vm.dirty_background_ratio=10

			  sysctl -p

	MySQL基础：
		.日志分类
			.错误日志
			.慢查询日志
			.常规日志
			.二进制日志
			.审计日志
		.日志审计
		.MySQL常用命令
			.select
			.update
			.insert
			.delete
			.drop
			.create
			.grant
			.show
		.SHOW核心语句
			.show databases
			.show tables
			.show processlist
			.show processlist full
			.show create table table_name
			.show index from table_name
			.show open tables
			.show tables from mysql
			.show columns from mysql.user
			.show full columns from mysql.user
			.show database like 'zabb%'
			.show columns from zabbix where 'Default' is null
			.show character set
			.show collation


	MySQL用户管理和权限管理
		.用户管理
			.MySQL账户认证
			.创建用户
			.用户权限授权
			.用户权限回收
			.删除用户
		.权限管理
			.业务权限: INSERT、UPDATE、DELETE、SELECT、CALL
			.全局权限：INSERT、UPDATE、DELETE、CREATE、ALTER、DROP、FILE、PROCESS、SHUTDOWN、SUPER、TRUNCATE



	MySQL复制架构
		.传统 Replication
		.GTIDs Replication
		.SEMI 半同步 (半同步:after_commit、增强半同步:after_sync)
		.MySQL Group Replication 多源复制


	MySQL-复制技术
		.复制线程剖析
			.传统 Replication
				1.M处理写入数据，写入binlog(二进制日志)
				2.dump_thread线程(通知)向Slave输送binlog日志
				3.Slave IO_thread线程从M 上拉取binlog日志，并flush 到relay_log
				4.Slave SQL_thread 重放relay_log 信息；处理写入SQL语句的数据，并将日志记录到binlog当中
				#传统复制会造成M S数据不一致，因为M 无法知道S 上binlog，同步有没有跟上
			.半同步 (半同步、增强半同步)
			 #半同步复制相对传统复制而言，半同步是在M上多了等待S 上接受完整的Binlog日志之后的ACK回应才做事务的COMMIT
			 	.半同步(after_commit) 是提交"commit"之后再等待S 的ACK回应
			 	.增强半同步(after_sync) 接受到S 回应的ACK，之后再做提交"commit"
		.多源复制(Replication)
			.二进制日志
			.基于Row格式+全局事务标识(GTID)
			.一个通信框架+事务排序控制(atomic message delivery & total ordering of message)
			.增强半同步 & 并行复制

		.复制延迟
			.让从库和主库保持固定的时间延迟
			.使用场景
				.利用延迟复制做错误恢复
				.利用延迟复制做统计分析环境处理
				.Slave可以同时从多个Master复制
					stop slave;
					change master to master_dely=N;		#开启延时复制(N单位秒)
					star slave;

					#stop  slave sql_thred;
					#change master to master_delay=N;
					#start slave sql_thread;

		.复制延迟排查
			.了解清楚当前数据库在做什么
				.show slave status\G;
					.查看relay_master_log_file: exec_master_log_pos: 信息做判断复制延迟问题
				.在主节点上查看:
					.mysqlbinlog -v --base64-ouput=decode-rows --start-position=exec_log_pos relay_master_log_file
			.查看MySQL当前SQL状态
				.机器负载情况查看 top
				.数据库 索引合不合理
					.pager more
					.show processlist;
					.show processlist full;
				.查看MySQL调度情况 	perf top -p `pidof mysqld`
			.避免复制延迟
				.从库配置适当高一点
				.使用MySQL5.7开启并行复制
				.表结构设计时，一定要有主键，而且主键要短小
				.使用新型硬件: PCI-E & SSD 类设备
				.程序端适当的Cache，减少数据的压力

		.复制监控和Binlog Server
			.show slave status\G;
				.slave_IO_Running=Yes
				.Slave_SQL_Running=Yes
			.重要指标
				.Master_log_File
				.Read_master_log_pos
				.Relay_Log_file
				.Relay_logs_Pos
				.Relay_master_log_file
				.Exec_Master_Log_Pos
			.Binlog Server
				.Binlog 放置在共享存储
				.利用mysqlbinlog命令备份远程的Binlog
					.mysqlbinlog --read-from-remote-server --raw --host=192.168.10.100 --port=3306 --user=repl --password=repl123 --stop-never msyql-bin.000001
						.read-from-remote-server  指定需要备份实现的IP或hostname
						.raw 指定存储格式是binary log fromat
						.host 需要有一个复制replication slave 权限
						.port 端口
						.stop-never 不要停止。 直到远程Server退出或是终止本连接
						.stop-never-slave-server-id 默认65535这个ID，如果冲突，可以声明
						.to-laast-log 备份到那个日志停止。如果stop-never声明了，这个参数会被忽略

					#注意:
						1.使用raw连接master时，以4K单位写入磁盘。并不能实时写入磁盘。和主库断开，flush log都会实时把日志写入磁盘
						2.如果不适用raw参数时，接收的日志以文本格式写入(意义不大)
	

