

	MySQL备份还原(mysqldump、mysqldumper、Xtrabackup、Binlog日志恢复中的作用)
		.mysqldump原理
			1.flush tables;
			2.flush tables with read lock;
			3.set session transcation isolation level repeatable read;
			4.start transcation /*!40100 with consistent snapshot */
			5.show @@global gtid_executed;
			6.show master status;
			7.Dump 非事务表(MyISAM表)
			8.unlock tables;
			9.show databases;
			10.savepoint sp;
			11.show table status like 'tb_xx';
			12.set session character_set_results='binary';
			13.show create table 'tb_xx';
			14.set seesion character_set_results='utf8';
			15.select /*!40100 SQL_NO_CACHE */* from tb_xx;
			16.rooback to salvepoint sp;
			17. ...
			18.最后是:rollback to slavepoint sp; RELEASE SAVEPOINT sp
		.Xtrabackup
			.全量原理
				1.start xtrabackup_log
				2.copy .ibd; ibdata1
				3.FLUSH TABLES WITH READ LOCK
				4.copy .FRM;MYD;MYI;misc files
				5.Get binary log position
				6.UNLOCK TABLES
				7.stop and copy xtrabackcup_log
			.增量原理
				1.start xtrabackup_log
				2.copy PAGES CHAGNED in .idb;ibdata1
				3.FLUSH TABLES WITH READ LOCK
				4.copy .FRM;MYD;MYI;misc file
				5.Get binary log position
				6.UNLOCK TABLES
				7.stop and copy xtrabackup_log
		.Binlog恢复
			.恢复技术
				.mysqlbinlog
					.mysqlbinlog -v --base64-output=decode-rows mysql-bin.000001 >>test.sql
					.mysqlbinlog -v --base64-output=decode-rows --start-position=443 --stop-position=799 mysql-bin.000002 >>test.sql
					.mysqlbinlog 还有基于时间段的参数 还有其他参数
				.binlog2sql
					.DML误操作: insert,update,delete 在binlog_format: row （针对DML操作的一个flashback，表需要有主键)
					.DDL语句没有Begin,commit;
			.表空间传输技术(前提是表结构文件损坏，表空间文件还是存在)
				.locak tables;/alter table table_name discard tablespace; 	#源DB上添加表锁并移除表空间文件(.ibd文件)
				.scp -rp  /data/mysql/mysql3306/data/src.idb /data/mysql/mysql3307/data/;unlock tables;	#从源DB上拷贝idb文件到目的DB上并解除表锁
				.create table table_name/alter table table_name discard tablespace;		#在目的DB上创建相同表并移除表空间文件
				.alter table table_name import tablespace;		#目的DB上加载表空间文件


	MySQL 高可用架构(Keepavlied、MHA、MGR、PXC、(Percona XtraDB Cluster)、ProxySQL + PXC (MGR))
		.Keepalived
			.M-S(这种架构下；M是写、S是读小型网站架构并发量小)
			.M-M(这种架构；互为主从，比较容易出现的是读写状态使用和数据一致性问题GTID)
		.MHA
			.基于ssh信息操作
			.针对5.6之前没有出现GTID模式之前使用更广泛，在GTID模式出现之后似乎有些累赘
		.MGR
			.MGR单主模式
				.M上提供读写功能
				.S上提供度功能
			.MGR多主模式
				.M和S 上都可以提供读写
			.MGR最少三台比较合适最大小于9台
			.MGR模式如果出现只剩下一台存活，需要人为手动停止MGR模式"stop group_replication;"DB才能正常对外提供服务
			.MGR备份问题
		.PXC(Percona XtraDB Cluster)
			.PXC不支持myisam引擎(如果在主节点上创建myisam表，其他节点是不会进行复制的)
			.集群建议最少3台机器，最大小于8台(2台机器也能运行，但是无法保证数据的稳定性，其中一台宕机整个集群无法访问)
			.集群3台机器损失一台的性能
			.PXC集群:wsrep_sst_method，有三种可以选:mysqldump,rsync,xtrabackup
				.mysqldump最慢
				.rsync最快，但是在同步期间会锁表
				.xtrabackup可以在线传输，只有在copy表结构文件时会锁表，和其备份原理一样	
		.ProxySQL
			.ProxySQL 读写分离
			.ProxySQL + PXC
			.ProxySQL + MGR


	MySQL 结合 Redis 使用
		.Redis高可用
			.Redis Cluster
			.Redis sentinel
		.MySQL结合Redis	
			.insert流程
				.更新数据(更新DB中的数据)
				.更新Redis中的数据(把读取的数据更新到Redis)
			.upate流程
				.更新时，如果key存在缓存中，则先更新缓存；再更新DB，如果缓存不存在，先更新DB
			.delete
				.先把DB里面的干掉，然后再把Redis干掉
				
